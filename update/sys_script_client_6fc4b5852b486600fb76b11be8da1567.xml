<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script_client">
    <sys_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_extended>false</applies_extended>
        <condition/>
        <description>When the end time is changed, recalculate the duration</description>
        <field>u_bxtim_end_time</field>
        <global>true</global>
        <isolate_script>false</isolate_script>
        <messages/>
        <name>Recalculate Duration (End Time)</name>
        <order/>
        <script><![CDATA[function onChange(control, oldValue, newValue, isLoading, isTemplate) {
	if (isLoading || newValue == '') {
		return;
	}
	
	var start = new Date(g_form.getValue('u_bxtim_start_time'));
	var end = new Date(g_form.getValue('u_bxtim_end_time'));
	
	if (g_form.getValue('u_bxtim_start_time') != "" ) {
		g_form.hideAllFieldMsgs('error');
		if (start > end) {
			g_form.clearValue('u_bxtim_end_time');
			g_form.showFieldMsg('u_bxtim_end_time', 'Your end time cannot be before your start time. Please adjust your dates accordingly.', 'error');
		} else {
			g_form.setValue('minutes_int', getMinutes(convertMilliseconds(start, end)));
			g_form.setValue('total_duration', getDurationString(convertMilliseconds(start, end)));
		}
	}
	
	if (isNaN(end) || isInvalidFormat(g_form.getValue('u_bxtim_end_time'))){
		g_form.clearValue('minutes_int');
		g_form.clearValue('total_duration');
		g_form.showFieldMsg('u_bxtim_end_time', "You've selected an invalid date format. Please try again, making sure to use the format MM-DD-YYYY HH:MM:SS AM/PM.", 'error');
		return false;
	}
}
		
function isInvalidFormat(date) {
	return date.match(/^\d{2}-\d{2}-\d{4} \d{2}:\d{2}:\d{2} [A-Z]{2}$/) == null;
}

function convertMilliseconds(startTime, endTime) {
	return (endTime - startTime);
}

function getMinutes(timestamp) {
	return Math.floor(timestamp / 60000);
}
			
function checkForSingleDigit(value) {
    return (value < 10) ? '0' + value : value;
}

function getDurationString(timestamp) {
	var seconds = Math.floor(timestamp / 1000),
		minutes = Math.floor(seconds / 60),
		hours = Math.floor(minutes / 60),
		days = Math.floor(hours / 24),
		remainingHours = hours,
		remainingMinutes = minutes % 60,
		remainingSeconds = seconds % 60;
	return checkForSingleDigit(remainingHours) + " hours and " + checkForSingleDigit(remainingMinutes) + " minutes";
}]]></script>
        <sys_class_name>sys_script_client</sys_class_name>
        <sys_created_by>ahernr</sys_created_by>
        <sys_created_on>2016-06-14 20:57:09</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>6fc4b5852b486600fb76b11be8da1567</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>Recalculate Duration (End Time)</sys_name>
        <sys_overrides/>
        <sys_package display_value="Research" source="x_blglp_research">a61934f5610dde80fb764481e7ed376d</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Research">a61934f5610dde80fb764481e7ed376d</sys_scope>
        <sys_update_name>sys_script_client_6fc4b5852b486600fb76b11be8da1567</sys_update_name>
        <sys_updated_by>ahernr</sys_updated_by>
        <sys_updated_on>2016-06-27 16:00:25</sys_updated_on>
        <table>x_blglp_research_time_segment</table>
        <type>onChange</type>
        <ui_type>10</ui_type>
        <view/>
    </sys_script_client>
</record_update>
